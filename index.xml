<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Efficient Git on Efficient-git</title><link>https://dwtechs.github.io/efficient-git/</link><description>Recent content in Efficient Git on Efficient-git</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dwtechs.github.io/efficient-git/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dwtechs.github.io/efficient-git/merge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/merge/</guid><description>Join two or more development histories together.
Description Incorporate changes since the time their histories diverged from your branch into the main branch. This command is actually used by git pull to incorporate changes from another repository and can be used by hand to merge changes from one branch into another.
Pre-merge checks Before applying outside changes, you should get your own work in good shape and committed locally, so it will not be clobbered if there are conflicts (See also git-stash).</description></item><item><title>Alias</title><link>https://dwtechs.github.io/efficient-git/alias/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/alias/</guid><description>Aliases are shortcuts for your most-used or complex Git commands
Edit your git config file If it is located in your home folder and you are using nano, you can do so:
nano ~/.gitconfig Otherwise, pick the editor of your choice and the right location of the file.
If you don&amp;rsquo;t have this config file already, create it:
touch ~/.gitconfig Add the alias For example let&amp;rsquo;s add a useful shortcut for listing all your current branches with their last update time.</description></item><item><title>Branches</title><link>https://dwtechs.github.io/efficient-git/branch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/branch/</guid><description>master | main: For production releases.
develop: For next release development.
Available branch prefixes for developers :
feat: For new feature to develop. Or anything else which not fit into other prefixes below. release: When release cycle is over. Features ready to ship are kept here. Freeing develop branch for next cycle. fix: For new bug to fix or hotfix required on master branch. doc: To improve or update developer documentation.</description></item><item><title>Commits</title><link>https://dwtechs.github.io/efficient-git/conventional-commit/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/conventional-commit/</guid><description>This is a simplifed version of the original conventional commits.
Following those rules to write your commit messages will bring great advantages to a project :
Automatic CHANGELOGs capability. Automatic semantic version bump (based on the types of commits landed). Readable nature of changes to teammates, the public, and other stakeholders. Automatic trigger of build and publish processes. Easier contribution to the project for new developers, by allowing them to explore a more structured commit history.</description></item><item><title>Getting Started</title><link>https://dwtechs.github.io/efficient-git/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/overview/</guid><description>Create a repo Let&amp;rsquo;s start manipulate Git by creating a Git repository.
In a new folder on your computer type :
git init This will create a hidden .git folder inside your current folder — this is the &amp;ldquo;repository&amp;rdquo; (or repo) where git stores all of its internal tracking data. Any changes you make to any files within the original folder will now be possible to track.
The original folder is now referred to as your working directory, as opposed to the repository (the .</description></item><item><title>Git Submodules</title><link>https://dwtechs.github.io/efficient-git/submodule/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/submodule/</guid><description>Git submodules are a powerful way to leverage git as an external dependency management tool. They allow a git repository to get other repositories as subdirectories. Git submodules are simply a reference to another repository at a particular snapshot in time. Git submodules enable a Git repository to incorporate and track version history of external code.
When to use When working in a multi-repositories project When using the same libraries in several projects Workflow If you want to launch a project on your local environment, clone the parent project (ie.</description></item><item><title>Gitflow overview</title><link>https://dwtechs.github.io/efficient-git/gitflow/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/gitflow/</guid><description>Gitflow is the most used Git branching model that involves the use of feature branches and multiple primary branches. Compared to trunk-based development, Giflow has numerous, longer-lived branches and larger commits. Under this model, developers create a feature branch and delay merging it to the main trunk branch until the feature is complete. These long-lived feature branches require more collaboration to merge and have a higher risk of deviating from the trunk branch.</description></item><item><title>Organization</title><link>https://dwtechs.github.io/efficient-git/gitlab/organization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/gitlab/organization/</guid><description>Naming rules Simple rules to name groups, subgroups and repositories :
Letters are in lowercase No whitespace. Use dash (-) instead No special characters Folders Overview Current folders :
&amp;lt;entity&amp;gt;/project/: contains repositories for projects &amp;lt;entity&amp;gt;/doc/: contains repositories for documentations &amp;lt;entity&amp;gt;/template/: contains repositories to help architects, tech leads and devops to start a new project faster (ie: starter kits, configurations&amp;hellip;) &amp;lt;entity&amp;gt;/library/: contains repositories for reusable code over several projects. This code is bundled as independent libraries; published and installed via the package manager of the targeted language.</description></item><item><title>Save</title><link>https://dwtechs.github.io/efficient-git/save/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/save/</guid><description>Git is not meant to be used as a backup device.
But let&amp;rsquo;s be pragmatic here as not every company has a proper way of backing up developers work every day.
As said before the core function of Git is to save checkpoints. Thus, if used properly, Git is a poweful backup application for developers and can save you from losing several days of work in case of problem.
Overview This backup routine should be done every evening when you leave work.</description></item><item><title>Semantic Versioning</title><link>https://dwtechs.github.io/efficient-git/semantic-versioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/semantic-versioning/</guid><description>Semantic versioning is not exactly a Git topic. But since you will need to bump the version of the application after each release and tag the master branch, you need to learn how to properly update it following the Semantic versioning principles.
Overview Given a version number MAJOR.MINOR.PATCH, increment the:
MAJOR version when you make incompatible API changes, MINOR version when you add functionality in a backwards compatible manner, PATCH version when you make backwards compatible bug fixes.</description></item><item><title>Squash</title><link>https://dwtechs.github.io/efficient-git/squash/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/squash/</guid><description>What is Git Squash Squashing in Git is the process of merging several commits into one.
Why would I want to squash my commits Often when we are working on a feature / bug fix / refactor etc, we may find ourselves making several interim commits over the duration of the change. Whilst we can push back to our main branch including all of these commits, this creates noise in the commit history potentially making it harder to identify the actual commit we are interested in.</description></item><item><title>tag</title><link>https://dwtechs.github.io/efficient-git/tag/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/tag/</guid><description>Git has the ability to tag specific points in a repository’s history. Within the Gitflow process, it is used to mark release points (v1.0, v2.0 and so on) on main branch.
Listing Your Tags git tag This command lists the tags in alphabetical order; the order in which they are displayed has no real importance.
You can also search for tags that match a particular pattern. The Git source repo, for instance, contains more than 500 tags.</description></item><item><title>Teamwork</title><link>https://dwtechs.github.io/efficient-git/teamwork/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/teamwork/</guid><description>Commit your work Description A commit contains the current contents of the index and the given log message describing the changes.
The new commit is a direct child of HEAD, usually the tip of the current branch, and the branch is updated to point to it (unless no branch is associated with the working tree, in which case HEAD is &amp;ldquo;detached&amp;rdquo;).
When When you finish a sub task. it is a good practice to commit several time in a day.</description></item><item><title>What is Git</title><link>https://dwtechs.github.io/efficient-git/intro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-git/intro/</guid><description>Git is the most popular Version Control System.
It makes it easier to track changes to files in a project.
You can determine exactly what changed, who changed it, and why.
Checkpoints The core function of git is to save checkpoints (revisions) and share them with other people. Everything revolves around this concept. If you’ve ever created a checkpoint to something, you’ll be able to get back to it later as long as your .</description></item></channel></rss>